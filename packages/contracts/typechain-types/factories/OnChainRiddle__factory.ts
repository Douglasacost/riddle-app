/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { OnChainRiddle, OnChainRiddleInterface } from "../OnChainRiddle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "correct",
        type: "bool",
      },
    ],
    name: "AnswerAttempt",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "riddle",
        type: "string",
      },
    ],
    name: "RiddleSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "Winner",
    type: "event",
  },
  {
    inputs: [],
    name: "bot",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "riddle",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_riddle",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "_answerHash",
        type: "bytes32",
      },
    ],
    name: "setRiddle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_answer",
        type: "string",
      },
    ],
    name: "submitAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x00020000000000020000008004000039000000400040043f00000001002001900000001e0000c13d00000060021002700000008c03200197000000040030008c000001050000413d000000000201043b000000e0022002700000008f0020009c0000002b0000213d000000930020009c000000370000613d000000940020009c0000003f0000613d000000950020009c000001050000c13d0000000001000416000000000001004b000001050000c13d0000000301000039000000000101041a0000009d001001980000000001000039000000010100c039000000800010043f00000097010000410000022b0001042e0000000001000416000000000001004b000001050000c13d000000000100041a0000008d011001970000000002000411000000000121019f000000000010041b0000002001000039000001000010044300000120000004430000008e010000410000022b0001042e000000900020009c000000a70000613d000000910020009c000000bb0000613d000000920020009c000001050000c13d0000000001000416000000000001004b000001050000c13d0000000301000039000000000101041a0000003b0000013d0000000001000416000000000001004b000001050000c13d000000000100041a0000009601100197000000800010043f00000097010000410000022b0001042e000000440030008c000001050000413d0000000002000416000000000002004b000001050000c13d0000000402100370000000000502043b000000980050009c000001050000213d0000002302500039000000000032004b000001050000813d0000000406500039000000000261034f000000000402043b000000a60040009c000000d20000813d0000001f07400039000000af077001970000003f07700039000000af07700197000000990070009c000000d20000213d0000008007700039000000400070043f000000800040043f00000000054500190000002405500039000000000035004b000001050000213d0000002003600039000000000531034f000000af064001980000001f0740018f000000a003600039000000690000613d000000a008000039000000000905034f000000009a09043c0000000008a80436000000000038004b000000650000c13d000000000007004b000000760000613d000000000565034f0000000306700210000000000703043300000000076701cf000000000767022f000000000505043b0000010006600089000000000565022f00000000056501cf000000000575019f0000000000530435000000a0034000390000000000030435000000000300041a00000096033001970000000004000411000000000034004b0000012f0000c13d0000000303000039000000000403041a0000009d00400198000001390000c13d000000800500043d000000980050009c000000d20000213d0000000104000039000000000604041a000000010760019000000001066002700000007f0660618f0000001f0060008c00000000080000390000000108002039000000000087004b000000b50000c13d000000200060008c0000009f0000413d000000000040043f0000001f075000390000000507700270000000a90770009a000000200050008c000000a5070040410000001f066000390000000506600270000000a90660009a000000000067004b0000009f0000813d000000000007041b0000000107700039000000000067004b0000009b0000413d0000001f0050008c000001a20000a13d000000000040043f000000af07500198000001ad0000c13d000000a008000039000000a506000041000001bb0000013d0000000001000416000000000001004b000001050000c13d0000000103000039000000000203041a000000010520019000000001012002700000007f0110618f0000001f0010008c00000000060000390000000106002039000000000662013f0000000100600190000000d80000613d000000ad01000041000000000010043f0000002201000039000000040010043f000000ae010000410000022c00010430000000240030008c000001050000413d0000000002000416000000000002004b000001050000c13d0000000402100370000000000502043b000000980050009c000001050000213d0000002302500039000000000032004b000001050000813d0000000406500039000000000261034f000000000402043b000000980040009c000000d20000213d0000001f07400039000000af077001970000003f07700039000000af07700197000000990070009c000000fe0000a13d000000ad01000041000000000010043f0000004101000039000000040010043f000000ae010000410000022c00010430000000800010043f000000000005004b000000e80000613d000000000030043f000000000001004b000000ed0000613d000000a5020000410000000003000019000000000502041a000000a004300039000000000054043500000001022000390000002003300039000000000013004b000000e00000413d000000ed0000013d000000b002200197000000a00020043f000000000001004b000000a0040000390000008004006039000000600240008a0000008001000039022a01f90000040f000000400100043d000200000001001d0000008002000039022a020b0000040f000000020200002900000000012100490000008c0010009c0000008c0100804100000060011002100000008c0020009c0000008c020080410000004002200210000000000121019f0000022b0001042e0000008007700039000000400070043f000000800040043f00000000054500190000002405500039000000000035004b000001070000a13d00000000010000190000022c000104300000002003600039000000000331034f000000af054001980000001f0640018f000000a001500039000001130000613d000000a007000039000000000803034f000000008908043c0000000007970436000000000017004b0000010f0000c13d000000000006004b000001200000613d000000000353034f0000000305600210000000000601043300000000065601cf000000000656022f000000000303043b0000010005500089000000000353022f00000000035301cf000000000363019f0000000000310435000000a0014000390000000000010435000000400100043d0000000303000039000000000803041a0000009600800198000001360000c13d0000009d008001980000014a0000c13d0000004402100039000000a4030000410000000000320435000000240210003900000010030000390000013f0000013d000000400100043d0000004402100039000000a703000041000000000032043500000024021000390000001f030000390000013f0000013d00000044021000390000009a030000410000013c0000013d000000400100043d0000004402100039000000a80300004100000000003204350000002402100039000000150300003900000000003204350000009b0200004100000000002104350000000402100039000000200300003900000000003204350000008c0010009c0000008c0100804100000040011002100000009c011001c70000022c000104300000002003100039000000800400043d000000000004004b000001560000613d00000000050000190000000006350019000000a007500039000000000707043300000000007604350000002005500039000000000045004b0000014f0000413d0000000005340019000000000005043500000000004104350000003f04400039000000af044001970000000002140019000000000042004b00000000040000390000000104004039000000980020009c000000d20000213d0000000100400190000000d20000c13d000200000008001d000000400020043f0000008c0030009c0000008c03008041000000400230021000000000010104330000008c0010009c0000008c010080410000006001100210000000000121019f00000000020004140000008c0020009c0000008c02008041000000c002200210000000000112019f0000009e011001c70000801002000039022a02250000040f0000000100200190000001050000613d0000000202000039000000000202041a000000000101043b000000000021004b00000000010000390000000101006039000100000001001d000001910000c13d00000002010000290000009f011001970000000005000411000000a002500197000000000112019f0000000302000039000000000012041b00000000010004140000008c0010009c0000008c01008041000000c0011002100000009e011001c70000800d020000390000000203000039000000a104000041022a02200000040f0000000100200190000001050000613d000000400100043d000000010200002900000000002104350000008c0010009c0000008c01008041000000400110021000000000020004140000008c0020009c0000008c02008041000000c002200210000000000112019f000000a2011001c70000800d020000390000000203000039000000a3040000410000000005000411000001f40000013d000000000005004b0000000006000019000001a60000613d000000a00600043d0000000307500210000000b10770027f000000b107700167000000000676016f0000000105500210000000000556019f000001c60000013d000000a5060000410000002009000039000000010870008a0000000508800270000000aa0880009a000000000a09001900000080099000390000000009090433000000000096041b0000002009a000390000000106600039000000000086004b000001b20000c13d000000a008a00039000000000057004b000001c40000813d0000000307500210000000f80770018f000000b10770027f000000b1077001670000000008080433000000000778016f000000000076041b000000010550021000000001055001bf000000000054041b0000002401100370000000000101043b0000000204000039000000000014041b000000000103041a0000009f01100197000000ab011001c7000000000013041b0000002003000039000000400100043d0000000004310436000000800300043d00000000003404350000004004100039000000000003004b000001df0000613d00000000050000190000000006450019000000a007500039000000000707043300000000007604350000002005500039000000000035004b000001d80000413d0000001f05300039000000af025001970000000003430019000000000003043500000040022000390000008c0020009c0000008c0200804100000060022002100000008c0010009c0000008c010080410000004001100210000000000112019f00000000020004140000008c0020009c0000008c02008041000000c002200210000000000112019f0000009e011001c70000800d020000390000000103000039000000ac04000041022a02200000040f0000000100200190000001050000613d00000000010000190000022b0001042e0000001f02200039000000af022001970000000001120019000000000021004b00000000020000390000000102004039000000980010009c000002050000213d0000000100200190000002050000c13d000000400010043f000000000001042d000000ad01000041000000000010043f0000004101000039000000040010043f000000ae010000410000022c0001043000000020030000390000000004310436000000003202043400000000002404350000004001100039000000000002004b0000021a0000613d000000000400001900000000051400190000000006430019000000000606043300000000006504350000002004400039000000000024004b000002130000413d000000000312001900000000000304350000001f02200039000000af022001970000000001210019000000000001042d00000223002104210000000102000039000000000001042d0000000002000019000000000001042d00000228002104230000000102000039000000000001042d0000000002000019000000000001042d0000022a000004320000022b0001042e0000022c0001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000000000000000000000000000000000000000000000000000000000000056049a850000000000000000000000000000000000000000000000000000000056049a8600000000000000000000000000000000000000000000000000000000bb3e315900000000000000000000000000000000000000000000000000000000dfbf53ae0000000000000000000000000000000000000000000000000000000010814c37000000000000000000000000000000000000000000000000000000001fdf55850000000000000000000000000000000000000000000000000000000022f3e2d4000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000020000000800000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff000000000000000000000000000000000000000000000000ffffffffffffff7f526964646c6520616c726561647920736f6c766564000000000000000000000008c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffff000000000000000000000000000000000000000000ffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff745c90b656b4aafe296c8ca35aeacfe56cb96c90e1d320e5da643fff1051b6c00200000000000000000000000000000000000020000000000000000000000000e1fc7c66a657ead4c3d3717cd8f74fb75e793a583bdc4105621e53abf02a9b054e6f2061637469766520726964646c6500000000000000000000000000000000b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf600000000000000000000000000000000000000000000000100000000000000004f6e6c7920626f742063616e2063616c6c20746869732066756e6374696f6e00526964646c6520616c72656164792061637469766500000000000000000000004ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f3090000000000000000000000010000000000000000000000000000000000000000c7c868b4cedbfd1ed1d9ab41c080a195ed463c01132c6c4b4b8d7983d1c5c29c4e487b71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb23aa1bb943fcb76107b90d43e817925296dd8ff063ddecc4ce9bdf0672a1571";

type OnChainRiddleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OnChainRiddleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OnChainRiddle__factory extends ContractFactory {
  constructor(...args: OnChainRiddleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OnChainRiddle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OnChainRiddle__factory {
    return super.connect(runner) as OnChainRiddle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OnChainRiddleInterface {
    return new Interface(_abi) as OnChainRiddleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OnChainRiddle {
    return new Contract(address, _abi, runner) as unknown as OnChainRiddle;
  }
}
